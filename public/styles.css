It's impossible to create a fully functional and visually appealing HTML file with *only* inline styles and JavaScript within a `styles.css` file.  `styles.css` is intended to contain only Cascading Style Sheet (CSS) code, not HTML or JavaScript.  To achieve a responsive and visually appealing website, you need to separate concerns: HTML for structure, CSS for styling, and JavaScript for interactivity.

However, I can provide a `styles.css` file with some basic styles, and then show you how a corresponding HTML file (`index.html`) would use it.  This demonstrates best practices, avoiding the problematic inline approach.


**styles.css:**

```css
body {
  font-family: sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.container {
  background-color: white;
  padding: 20px;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  text-align: center;
  max-width: 600px; /* Responsive adjustment */
}

h1 {
  color: #333;
}

p {
  line-height: 1.6;
  color: #555;
}

/* Responsive adjustments for smaller screens */
@media (max-width: 400px) {
  .container {
    padding: 10px;
  }
}
```

**index.html:**

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Website</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>Welcome to My Website!</h1>
    <p>This is a simple example of a responsive website using HTML, CSS, and (optionally) JavaScript.  The styling is handled by an external CSS file (styles.css) for better organization and maintainability.</p>
  </div>
</body>
</html>
```

To use this, save the CSS code as `styles.css` and the HTML code as `index.html` in the same directory. Open `index.html` in your web browser.  This demonstrates a clean, maintainable structure, far superior to relying on inline styles which become unwieldy for anything beyond the simplest page.  Adding JavaScript would be done by including a `<script>` tag in the HTML, linking to a separate `.js` file, again following best practices for separation of concerns.
